/**
 * 출처 - 자바 Next 웹 프로그래밍 (박재성 저)
 * 1. 머리속 구상만으로는 하루 동안 나라 100개도 세울 수 있지 않나. 우리나라 지식인들은 비판에는 일류지만 실천력이 약하다.
 * 비판만 하지 덤비는 사람이 없다. 일류 비판가보다 삼류라도 행동가가 필요하다.
 *
 * 2. 리팩토링을 하려면 먼저 나쁜 냄새가 나는 코드를 찾을 수 있는 능력을 키워야 한다.
 * 리팩토링을 어떻게 하느냐 능력보다 리팩토링이 필요한 시점과 종료해야 하는 시점을 판단해야 하는 능력이 중요하다.
 * 나쁜 냄새가 진동하는 코드를 찾지 못하면 리팩토링할 필요성조차 느끼지 못해 아무런 시도도 하지 않는다.
 *
 * 리팩토링의 직관을 키우려면 좋은 코드, 나쁜 코드 가리지 말고 다른 개발자가 구현한 많은 코드를 읽을 필요가 있다.
 * 다음 단계는 소스코드를 직접 구현해 보는 것이다. 글쓰기를 많이 한다고 해서 글쓰는 실력이 늘지 않듯이 프로그래밍 또한
 * 많은 코드를 구현한다고 해서 리팩토링 실력이 늘지 않는다. 자신이 구현한 코드에 대해 지속적으로 의도적인 리팩토링을 할 때 한단계 성장할 수 있다.
 * 
 * 3. 테스트 코드를 기반으로 개발할 경우 장점
 * 3.1 클래스에 버그가 있는지 빨리 찾아 구현할 수 있다. HttpRequest를 테스트 하지 않은 상태에서 RequestHandler가 사용한다면 수동으로 일일히 확인해야 한다.
 * 3.2 디버깅하기 쉽다. 클래스에 대한 단위 테스트를 하는 것은 결국 디버깅을 좀 더 쉽고 빠르게 할 수 있으므로 개발 생산성을 높여준다.
 * 3.3 테스트 코드가 있기 때문에 마음놓고 리팩토링을 할 수 있다.
 *
 * 4. 개발을 하다 보면 private 메소드인데 로직 복잡도가 높아 추가적인 테스트가 필요하다고 생가고디는 메소드가 발생한다. 이 메소드를 테스트 가능하도록 하려면?
 * 첫 째는 private 접근 제어자인 메소드를 default(메소드에 아무 접근 제어자도 추가하지 않으면 패키지가 같은 클래스의 경우 접근 가능한 접근 제어자를 가짐)
 * 접근제어자로 수정하고 리턴하도록 수정해 테스트를 할 수 있다.
 * 두 번째는 새로운 클래스로 분리하는 방법이 있다. ProcessRequestLine 메소드는 반환해야 하는 상태값이 한 개가 아니라서 새로운 클래스를 추가해본다.
 */
